generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      account[]
  comments      comment[]
  posts         post[]
  sessions      session[]
}

model account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  provider          String
  providerAccountId String
  type              String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model series {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  posts       post[]   @relation("SeriesToPost")
  createdAt   DateTime @default(now())
}

model post {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String    @db.VarChar(255)
  subtitle    String?
  content     String
  createdAt   DateTime  @default(now())
  userId      String    @db.Uuid
  category    String
  seriesId    String?   @db.Uuid
  series      series?   @relation("SeriesToPost", fields: [seriesId], references: [id])
  isPublished Boolean   @default(false)
  comments    comment[]
  user        user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  userImage String?
  userName  String?
  post      post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model thought {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  createdAt DateTime @default(now())
}

enum CategoryType {
  TRAVEL
  DEV
  PHOTO
  TALK
}
